import logging
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7302146730:AAH1leQBmTGUFSWoy8JnJX6EsgJESXJ9EYU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
DB_NAME = "diary.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS entries (
            user_id INTEGER,
            date TEXT,
            message TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"üìñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new_entry [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/date_search [–¥–¥.–º–º.–≥–≥–≥–≥] - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏\n"
        "/profile - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

# –ö–æ–º–∞–Ω–¥–∞ /new_entry
def new_entry(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = ' '.join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç

    if not text:
        update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏: /new_entry [—Ç–µ–∫—Å—Ç]")
        return

    date = datetime.now().strftime("%d.%m.%Y")
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO entries VALUES (?, ?, ?)", (user_id, date, text))
    conn.commit()
    conn.close()

    update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /date_search
def date_search(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É: /date_search –¥–¥.–º–º.–≥–≥–≥–≥")
        return

    date = context.args[0]
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT message FROM entries WHERE user_id=? AND date=?", (user_id, date))
    entries = cursor.fetchall()
    conn.close()

    if entries:
        response = f"üìÖ {date}:\n" + "\n".join([entry[0] for entry in entries])
    else:
        response = "–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥–∞ /profile
def profile(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
    cursor.execute("SELECT date FROM entries WHERE user_id=? ORDER BY date ASC LIMIT 1", (user_id,))
    first_date = cursor.fetchone()
    first_date = first_date[0] if first_date else "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cursor.execute("SELECT COUNT(*) FROM entries WHERE user_id=?", (user_id,))
    total = cursor.fetchone()[0]

    conn.close()
    update.message.reply_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_date}\n"
        f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error(update: Update, context: CallbackContext):
    logger.warning(f'–û—à–∏–±–∫–∞: {context.error}')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("new_entry", new_entry, pass_args=True))
    dp.add_handler(CommandHandler("date_search", date_search, pass_args=True))
    dp.add_handler(CommandHandler("profile", profile))
    dp.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()